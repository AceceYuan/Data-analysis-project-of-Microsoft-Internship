import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt
plt.rcParams['font.sans-serif'] = 'SimHei'
plt.rcParams['axes.unicode_minus'] = False

df=pd.read_csv('C:/Users/Acece/Desktop/数据集.csv', sep=',')
df

#rename
df = df.rename(columns={'Rank':'游戏排名','Name':'游戏名','Platform':'发布平台','Year':'发行年份',
                        'Genre':'游戏种类', 'Publisher':'发行商',
                        'NA_Sales':'北美销售额', 'EU_Sales':'欧洲销售额',
                        'JP_Sales':'日本销售额', 'Other_Sales':'其他地区销售量',
                        'Global_Sales':'全球总销售额'})
#Check the missing value of each data
print(df.isnull().sum())

df.dropna(inplace=True)
df.isnull().sum() 

df=df.drop_duplicates(subset=['发行年份','游戏名'])
df

df.describe()

plt.figure(figsize=(10,10))
data4 = df
data4 = data4.drop(columns = ['游戏排名','发行年份','发布平台','游戏种类'])
data4.plot.box(title="Box figure")
plt.grid(linestyle="--", alpha=0.4)
plt.show()


data = df

#Check the number of games released over the years, we can see that the data for 2017 and 2020 are too small (only three data points) to be analyzed and deleted
 

plt.figure(figsize=(12,6)) #set size
Y_COUNT=data.groupby('发行年份')['游戏名'].count()
Y_COUNT.plot(kind='bar')
plt.show()


data.drop(data[data['发行年份'] == 2017.0].index, inplace = True)
data.drop(data[data['发行年份'] == 2020.0].index, inplace = True)


pivot3=pd.pivot_table(data,index='游戏种类',values='全球总销售额',aggfunc=np.sum)
sorted_pivot3=pivot3.sort_values('全球总销售额',ascending=False)
sorted_pivot3['百分占比']=sorted_pivot3['全球总销售额']/np.sum(sorted_pivot3['全球总销售额'])
sorted_pivot3

import seaborn as sn
data_s=data[['游戏种类','发行年份','全球总销售额']]
DataRegion=pd.DataFrame(data_s.groupby(['发行年份','游戏种类'])['全球总销售额'].sum()).reset_index()
fig,ax=plt.subplots(figsize=(30,15))
sn.pointplot(x=DataRegion['发行年份'],y=DataRegion['全球总销售额'],hue=DataRegion['游戏种类'],
             data=DataRegion)
ax.set(xlabel='发行年份', ylabel='全球总销售额', title='不同时间不同游戏类型每年销售额对比图')
plt.xticks(rotation=90)
plt.savefig('不同时间不同游戏类型每年销售额对比图.png')
plt.show()

data_s=data[['游戏种类','发行年份','全球总销售额','游戏名']]
DataRegion=pd.DataFrame(data_s.groupby(['发行年份','游戏种类'])['游戏名'].count()).reset_index()
DataRegion
fig,ax=plt.subplots(figsize=(30,15))
sn.pointplot(x=DataRegion['发行年份'],y=DataRegion['游戏名'],hue=DataRegion['游戏种类'],
             data=DataRegion)
ax.set(xlabel='发行年份', ylabel='游戏种类数量', title='不同时间不同游戏类型发行类型数量对比图')
plt.xticks(rotation=70)
plt.savefig('不同时间不同游戏类型发行类型数量对比图.png')
plt.show()


data2 = data.groupby('游戏种类').sum()
data2 = data2.drop(columns = ['游戏排名','发行年份'])
data2 = data2.drop(columns = ['全球总销售额'])
data2

from matplotlib import pyplot as plt
plt.figure(figsize=(80,60))

data2.plot(kind='bar')
plt.show()

aa=data.groupby('游戏种类')['北美销售额'].sum()
plt.figure(figsize=(8,9))
colors=['#FFFF99','#CCFFCC','lightsteelblue','brown','whitesmoke','lightblue']
aa.plot(kind='pie',autopct='%3.2f%%',colors=colors)
plt.show()
bb = data.groupby('游戏种类')['欧洲销售额'].sum()
plt.figure(figsize=(8,9))
colors=['#FFFF99','#CCFFCC','lightsteelblue','brown','whitesmoke','lightblue']
bb.plot(kind='pie',autopct='%3.2f%%',colors=colors)
plt.show()

cc = data.groupby('游戏种类')['日本销售额'].sum()
plt.figure(figsize=(8,9))
colors=['#FFFF99','#CCFFCC','lightsteelblue','brown','whitesmoke','lightblue']
cc.plot(kind='pie',autopct='%3.2f%%',colors=colors)
plt.show()

dd = data.groupby('游戏种类')['其他地区销售量'].sum()
plt.figure(figsize=(8,9))
colors=['#FFFF99','#CCFFCC','lightsteelblue','brown','whitesmoke','lightblue']
dd.plot(kind='pie',autopct='%3.2f%%',colors=colors)
plt.show()

pivot3=pd.pivot_table(df,index='发行商',values='全球总销售额',aggfunc=np.sum)
sorted_pivot3=pivot3.sort_values('全球总销售额',ascending=False)
sorted_pivot3['百分占比']=sorted_pivot3['全球总销售额']/np.sum(sorted_pivot3['全球总销售额'])
sorted_pivot3


plt.figure(figsize=(8,5))
sorted_pivot3['全球总销售额'][0:10].plot(kind='bar')
plt.show()

pivot4=pd.pivot_table(data,index='发行年份',columns='发行商',values='全球总销售额',aggfunc=np.sum)
near_sum_pivot4=pivot4.iloc[-4:,:].sum().sort_values(ascending=False)
#near_sum_pivot4
near_sum_pivot4.head(10)

import seaborn as sns
get_ipython().magic('pylab inline')

pylab.rcParams['figure.figsize'] = (15, 10)

corrmatrix = data.corr()

#新增加两个相关性
data_hh = data
data_hh.游戏种类.replace('Action',1,inplace = True)
data_hh.游戏种类.replace('Sports',2,inplace = True)
data_hh.游戏种类.replace('Misc',3,inplace = True)
data_hh.游戏种类.replace('Role-Playing',4,inplace = True)
data_hh.游戏种类.replace('Adventure',5,inplace = True)
data_hh.游戏种类.replace('Shooter',6,inplace = True)
data_hh.游戏种类.replace('Racing',7,inplace = True)
data_hh.游戏种类.replace('Simulation',8,inplace = True)
data_hh.游戏种类.replace('Fighting',9,inplace = True)
data_hh.游戏种类.replace('Platform',10,inplace = True)
data_hh.游戏种类.replace('Strategy',11,inplace = True)
data_hh.游戏种类.replace('Puzzle',12,inplace = True)

data_hh.发布平台.replace('PS2',1,inplace = True)
data_hh.发布平台.replace('DS',2,inplace = True)
data_hh.发布平台.replace('PS',3,inplace = True)
data_hh.发布平台.replace('Wii',4,inplace = True)
data_hh.发布平台.replace('PSP',5,inplace = True)
data_hh.发布平台.replace('PS3',6,inplace = True)
data_hh.发布平台.replace('GBA',7,inplace = True)
data_hh.发布平台.replace('X360',8,inplace = True)
data_hh.发布平台.replace('PC',9,inplace = True)
data_hh.发布平台.replace('3DS',10,inplace = True)
data_hh.发布平台.replace('PSV',11,inplace = True)
data_hh.发布平台.replace('XB',12,inplace = True)
data_hh.发布平台.replace('N64',13,inplace = True)
data_hh.发布平台.replace('PS4',14,inplace = True)
data_hh.发布平台.replace('SNES',15,inplace = True)
data_hh.发布平台.replace('GC',16,inplace = True)
data_hh.发布平台.replace('SAT',17,inplace = True)
data_hh.发布平台.replace('2600',18,inplace = True)
data_hh.发布平台.replace('NES',19,inplace = True)
data_hh.发布平台.replace('GB',20,inplace = True)
data_hh.发布平台.replace('WiiU',21,inplace = True)
data_hh.发布平台.replace('DC',22,inplace = True)
data_hh.发布平台.replace('XOne',23,inplace = True)
data_hh.发布平台.replace('GEN',24,inplace = True)
data_hh.发布平台.replace('NG',25,inplace = True)
data_hh.发布平台.replace('SCD',26,inplace = True)
data_hh.发布平台.replace('WS',27,inplace = True)
data_hh.发布平台.replace('3DO',28,inplace = True)
data_hh.发布平台.replace('TG16',29,inplace = True)
data_hh.发布平台.replace('GG',30,inplace = True)
data_hh.发布平台.replace('PCFX',31,inplace = True)
data_hh.info()

#heatmap

sns.heatmap(corrmatrix,square=True,vmax=1,vmin=-1,center=0.0,cmap='coolwarm')

data.corr(method='pearson')

df_moxin = data

df_moxin = df_moxin.drop(columns = ['游戏排名', '发布平台', '发行年份', '游戏种类', '发行商'])
df_moxin = df_moxin.rename(columns={'游戏名':'a', '北美销售额':'b', '欧洲销售额':'c', '日本销售额':'d', '其他地区销售量':'e', '全球销售总量':'f'})
df_moxin




#predict

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
plt.rcParams['font.sans-serif']=['SimHei']
plt.rcParams['axes.unicode_minus']=False
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
from sklearn import linear_model
import xgboost as xgb
import lightgbm as lgb
from sklearn.model_selection import train_test_split,GridSearchCV,cross_val_score
from sklearn.metrics import mean_squared_error,make_scorer

feature_cols = ['b', 'c', 'd', 'e']
X_data = df_moxin[feature_cols]
Y_data = df_moxin['f']
print('X train :',X_data.shape)


#try xgb
def build_model_xgb(x_train,y_train):
    estimator = xgb.XGBRegressor(max_depth=10,subsample=0.7,colsample_bytree=0.75,reg_lambda=0.1,n_estimators=300)
    param_grid = {'learning_rate': [0.01, 0.05, 0.1, 0.2]}
    model = GridSearchCV(estimator, param_grid)
    model.fit(x_train, y_train)
    return model


x_train,x_val,y_train,y_val = train_test_split(X_data,Y_data,test_size=0.3)
print("ok")

print('Train xgb')
model_xgb = build_model_xgb(x_train,y_train)
val_xgb = model_xgb.predict(x_val)
MSE_xgb = mean_squared_error(y_val,val_xgb)
print('xgb的MSE分数 :',MSE_xgb)

print('Predict xgb')
model_xgb_pre = build_model_xgb(X_data,Y_data)
subA_xgb = model_xgb_pre.predict(X_data)
print("ok")

sub_xgb = pd.DataFrame()
sub_xgb['游戏名'] = df_moxin.a
sub_xgb['f'] = subA_xgb
sub_xgb

sub_xgb.to_csv("xgb_模型预测.csv",index=False)



#another model: lgb
def build_model_lgb(x_train,y_train):
    estimator = lgb.LGBMRegressor(num_leaves=127,n_estimators = 300)
    param_grid = {'learning_rate': [0.01, 0.05, 0.1, 0.2]}
    gbm = GridSearchCV(estimator, param_grid)
    gbm.fit(x_train, y_train)
    return gbm
    
    print('Train lgb')
model_lgb = build_model_lgb(x_train,y_train)
val_lgb = model_lgb.predict(x_val)
MSE_lgb = mean_squared_error(y_val,val_lgb)
print('lgb的MSE分数 :',MSE_lgb)

sub_lgb = pd.DataFrame()
sub_lgb['游戏名'] = df_moxin.a
sub_lgb['f'] = subA_lgb

sub_lgb

sub_lgb.to_csv("lgb_模型预测.csv",index=False)

train_lgb_pred = model_lgb.predict(x_train)
train_xgb_pred = model_xgb.predict(x_train)
Stack_X_train = pd.DataFrame()
Stack_X_train['Method_1'] = train_lgb_pred
Stack_X_train['Method_2'] = train_xgb_pred
Stack_X_val = pd.DataFrame()
Stack_X_val['Method_1'] = val_lgb
Stack_X_val['Method_2'] = val_xgb
Stack_X_test = pd.DataFrame()
Stack_X_test['Method_1'] = subA_lgb
Stack_X_test['Method_2'] = subA_xgb
print("ok")

def build_model_lr(x_train,y_train):
    reg_model = linear_model.LinearRegression()
    reg_model.fit(x_train,y_train)
    return reg_model
model_lr_Stacking = build_model_lr(Stack_X_train,y_train)

train_pre_Stacking = model_lr_Stacking.predict(Stack_X_train)
print('MSE of Stacking-LR:',mean_squared_error(y_train,train_pre_Stacking))


val_pre_Stacking = model_lr_Stacking.predict(Stack_X_val)
print('MSE of Stacking-LR:',mean_squared_error(y_val,val_pre_Stacking))

print('Predict Stacking-LR')
subA_Stacking = model_lr_Stacking.predict(Stack_X_test)
print("ok")
sub_stack = pd.DataFrame()
sub_stack['游戏名'] = df_moxin.a
sub_stack['f'] = subA_Stacking
sub_stack.to_csv("sub_stacking模型融合.csv",index=False)
print("ok")





